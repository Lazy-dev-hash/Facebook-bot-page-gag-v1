
'use strict';

// ===================================================================================
// 1. SETUP & IMPORTS (USING ES MODULE SYNTAX)
// ===================================================================================
import 'dotenv/config';
import express from 'express';
import bodyParser from 'body-parser';
import axios from 'axios';
import logger from './logger.js';

// Load and validate credentials from .env file
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;

// Validate required environment variables
if (!PAGE_ACCESS_TOKEN) {
  logger.error('‚ùå PAGE_ACCESS_TOKEN is required! Please set it in your .env file.');
  process.exit(1);
}

if (!VERIFY_TOKEN) {
  logger.error('‚ùå VERIFY_TOKEN is required! Please set it in your .env file.');
  process.exit(1);
}

// ===================================================================================
// 2. AUTO UPTIME SYSTEM (24/7 ONLINE)
// ===================================================================================

const UPTIME_CONFIG = {
  enabled: true,
  pingInterval: 4 * 60 * 1000, // 4 minutes for enhanced monitoring
  selfUrl: process.env.RENDER_URL || 'https://facebook-bot-page-gag-v1.onrender.com',
  maxRetries: 5,
  heartbeatEmojis: ['üíñ', 'üíù', 'üíó', 'üíì', 'üíï', 'üíò', 'ü´∂', '‚ú®', 'üåü', '‚≠ê'],
  statusEmojis: {
    online: 'üü¢',
    warning: 'üü°', 
    error: 'üî¥',
    initializing: 'üîµ'
  }
};

let uptimeStats = {
  startTime: Date.now(),
  totalPings: 0,
  successfulPings: 0,
  lastPing: null,
  status: 'initializing',
  consecutiveSuccesses: 0,
  consecutiveFailures: 0,
  bestResponseTime: Infinity,
  worstResponseTime: 0,
  averageResponseTime: 0,
  totalResponseTime: 0
};

async function performUptimePing() {
  if (!UPTIME_CONFIG.enabled) return;

  const startTime = Date.now();
  const heartbeat = UPTIME_CONFIG.heartbeatEmojis[Math.floor(Math.random() * UPTIME_CONFIG.heartbeatEmojis.length)];

  try {
    const response = await axios.get(`${UPTIME_CONFIG.selfUrl}/health`, {
      timeout: 12000,
      headers: { 
        'User-Agent': 'Enhanced-GagBot-Uptime-Monitor-v3.0',
        'X-Heartbeat': 'love',
        'X-Love': 'enabled'
      }
    });

    const responseTime = Date.now() - startTime;

    // Update stats
    uptimeStats.totalPings++;
    uptimeStats.successfulPings++;
    uptimeStats.consecutiveSuccesses++;
    uptimeStats.consecutiveFailures = 0;
    uptimeStats.lastPing = Date.now();
    uptimeStats.status = 'online';
    uptimeStats.totalResponseTime += responseTime;
    uptimeStats.averageResponseTime = Math.round(uptimeStats.totalResponseTime / uptimeStats.successfulPings);

    if (responseTime < uptimeStats.bestResponseTime) uptimeStats.bestResponseTime = responseTime;
    if (responseTime > uptimeStats.worstResponseTime) uptimeStats.worstResponseTime = responseTime;

    const statusIcon = UPTIME_CONFIG.statusEmojis.online;
    const successRate = Math.round((uptimeStats.successfulPings / uptimeStats.totalPings) * 100);

    // Beautiful success messages with variety
    const successMessages = [
      `${heartbeat} Enhanced uptime ping successful! ${statusIcon} Render is loving us back!`,
      `‚ú® Beautiful connection to Render maintained! ${heartbeat} (${responseTime}ms)`,
      `üåü Aesthetic uptime check complete! ${statusIcon} Bot staying gorgeous & alive!`,
      `${heartbeat} Render heartbeat received with love! ‚ú® (Success: ${successRate}%)`,
      `üíñ Enhanced monitoring active! ${statusIcon} Render connection stable & beautiful!`
    ];

    const randomMessage = successMessages[Math.floor(Math.random() * successMessages.length)];
    logger.success(`üåê ${randomMessage} (${uptimeStats.successfulPings}/${uptimeStats.totalPings})`);

    // Special milestone celebrations
    if (uptimeStats.consecutiveSuccesses === 10) {
      logger.banner('üéâ Enhanced Uptime Milestone!', `10 consecutive successful pings! ${heartbeat} Render loves us!`);
    } else if (uptimeStats.consecutiveSuccesses === 50) {
      logger.banner('üåü Amazing Uptime Achievement!', `50 consecutive pings! ${heartbeat} Bot is absolutely thriving!`);
    } else if (uptimeStats.consecutiveSuccesses === 100) {
      logger.banner('üíñ Incredible Uptime Success!', `100 consecutive pings! ${heartbeat} Peak performance achieved!`);
    }

  } catch (error) {
    const responseTime = Date.now() - startTime;

    uptimeStats.totalPings++;
    uptimeStats.consecutiveFailures++;
    uptimeStats.consecutiveSuccesses = 0;
    uptimeStats.status = uptimeStats.consecutiveFailures >= 3 ? 'error' : 'warning';

    const statusIcon = uptimeStats.consecutiveFailures >= 3 ? 
      UPTIME_CONFIG.statusEmojis.error : 
      UPTIME_CONFIG.statusEmojis.warning;

    const aestheticErrors = [
      `${statusIcon} Temporary beauty interruption on Render: ${error.message} (${responseTime}ms)`,
      `üíî Brief connection hiccup with Render - enhancing resilience! ${heartbeat}`,
      `‚ö†Ô∏è Aesthetic uptime check needs attention: ${error.message}`,
      `${statusIcon} Render is taking a beauty break - we'll keep trying! ${heartbeat}`
    ];

    const randomError = aestheticErrors[Math.floor(Math.random() * aestheticErrors.length)];
    logger.warn(`üåê ${randomError}`);

    // Auto-recovery attempt for enhanced resilience
    if (uptimeStats.consecutiveFailures === 3) {
      logger.system('üîÑ Enhanced auto-recovery initiated! Render connection will be restored! ‚ú®');
    }
  }
}

// Start enhanced aesthetic uptime monitoring
if (UPTIME_CONFIG.enabled) {
  setInterval(performUptimePing, UPTIME_CONFIG.pingInterval);

  // Beautiful startup banner
  logger.banner('üíñ Enhanced Aesthetic Auto-Uptime', `Beautiful 24/7 monitoring with Render love! ü´∂`);
  logger.success(`‚ú® Target URL: ${UPTIME_CONFIG.selfUrl}`);
  logger.success(`üåü Ping Interval: ${UPTIME_CONFIG.pingInterval / 1000 / 60} minutes with love`);
  logger.success(`ü´∂ Enhanced Features: Heartbeat tracking, milestone celebrations, auto-recovery`);

  // Aesthetic startup delay for first ping
  setTimeout(() => {
    logger.system('üöÄ Initiating first enhanced ping to Render with extra love! üíñ');
    performUptimePing();
  }, 15000); // 15 second delay for aesthetic startup
}

// ===================================================================================
// 3. FACEBOOK MESSENGER HELPER FUNCTIONS
// ===================================================================================

async function sendMessage(recipientId, messagePayload, pageAccessToken) {
  // Input validation
  if (!recipientId || !messagePayload || !pageAccessToken) {
    logger.error('Missing required parameters for sendMessage');
    return false;
  }

  const request_body = {
    recipient: { id: recipientId },
    message: messagePayload,
    messaging_type: 'RESPONSE',
  };

  try {
    const response = await axios.post('https://graph.facebook.com/v19.0/me/messages', request_body, {
      params: { access_token: pageAccessToken },
      timeout: 10000, // 10 second timeout
    });
    logger.success('Message sent to user:', recipientId);
    return true;
  } catch (error) {
    if (error.response) {
      logger.error('Facebook API error:', {
        status: error.response.status,
        data: error.response.data,
        user: recipientId
      });
    } else if (error.request) {
      logger.error('Network error sending message:', error.message);
    } else {
      logger.error('Error setting up message request:', error.message);
    }
    return false;
  }
}

async function sendTypingIndicator(recipientId, pageAccessToken, action = 'typing_on') {
  const request_body = {
    recipient: { id: recipientId },
    sender_action: action
  };

  try {
    await axios.post('https://graph.facebook.com/v19.0/me/messages', request_body, {
      params: { access_token: pageAccessToken },
      timeout: 5000
    });
    logger.debug(`‚ú® Typing indicator (${action}) sent to user: ${recipientId}`);
    return true;
  } catch (error) {
    logger.error('Error sending typing indicator:', error.message);
    return false;
  }
}

async function sendVoiceMessage(recipientId, voiceMessageUrl, pageAccessToken) {
  if (!recipientId || !voiceMessageUrl || !pageAccessToken) {
    logger.error('Missing required parameters for sendVoiceMessage');
    return false;
  }

  const request_body = {
    recipient: { id: recipientId },
    message: {
      attachment: {
        type: "audio",
        payload: {
          url: voiceMessageUrl,
          is_reusable: true
        }
      }
    },
    messaging_type: 'RESPONSE',
  };

  try {
    const response = await axios.post('https://graph.facebook.com/v19.0/me/messages', request_body, {
      params: { access_token: pageAccessToken },
      timeout: 10000
    });
    logger.success('Voice message sent to user:', recipientId);
    return true;
  } catch (error) {
    logger.error('Error sending voice message:', error.message);
    return false;
  }
}

// ===================================================================================
// 4. ENHANCED GAGSTOCK BOT LOGIC
// ===================================================================================

const activeSessions = new Map();
const lastSentCache = new Map();
const userRateLimit = new Map();
const userDoNotDisturb = new Map();
const customCommandUsers = new Set(); // Allowed users for custom commands
const MAX_REQUESTS_PER_MINUTE = 10;

// Enhanced Admin and update system
const ADMIN_USER_ID = process.env.ADMIN_USER_ID?.toString(); // Ensure string comparison
const pendingUpdates = new Map();
const systemVersion = "3.1.0"; // Updated version
const newUsers = new Set();

// Stock clearing system
const stockClearingAlerts = new Map();
const STOCK_CLEAR_WARNING_TIME = 30000; // 30 seconds before clearing

// Custom scheduling variables for auto on/off
let botIsOnline = true;
const BOT_OFFLINE_HOUR = 0; // 12:00 AM (midnight)
const BOT_OFFLINE_MINUTE = 0;
const BOT_ONLINE_HOUR = 5; // 5:00 AM
const BOT_ONLINE_MINUTE = 0;
let offlineMessageSent = false;
let onlineMessageSent = false;

// Voice message URL
const VOICE_MESSAGE_URL = 'https://github.com/Lazy-dev-hash/relapse-music/raw/main/Multo.mp3';

// Enhanced session cleanup with stock clearing alerts
setInterval(() => {
  const now = Date.now();

  // Clean inactive sessions
  for (const [userId, session] of activeSessions) {
    if (session.lastActivity && (now - session.lastActivity) > 30 * 60 * 1000) {
      clearTimeout(session.timeout);
      activeSessions.delete(userId);
      lastSentCache.delete(userId);
      stockClearingAlerts.delete(userId);
      logger.info(`üßπ Cleaned up inactive session for user: ${userId}`);
    }
  }

  // Clean old cache entries
  for (const [userId] of lastSentCache) {
    if (!activeSessions.has(userId)) {
      lastSentCache.delete(userId);
    }
  }
}, 30 * 60 * 1000);

const PH_TIMEZONE = "Asia/Manila";

function pad(n) { return n < 10 ? "0" + n : n; }
function getPHTime() { return new Date(new Date().toLocaleString("en-US", { timeZone: PH_TIMEZONE })); }

function getCountdown(target) {
  const now = getPHTime();
  const msLeft = target - now;
  if (msLeft <= 0) return "00h 00m 00s";
  const h = Math.floor(msLeft / 3.6e6);
  const m = Math.floor((msLeft % 3.6e6) / 6e4);
  const s = Math.floor((msLeft % 6e4) / 1000);
  return `${pad(h)}h ${pad(m)}m ${pad(s)}s`;
}

function getNextRestocks() {
  const now = getPHTime();
  const timers = {};

  // Eggs restock every 30 minutes (XX:00 and XX:30)
  const nextEgg = new Date(now);
  nextEgg.setMinutes(now.getMinutes() < 30 ? 30 : 0);
  if (now.getMinutes() >= 30) nextEgg.setHours(now.getHours() + 1);
  nextEgg.setSeconds(0, 0);
  timers.egg = getCountdown(nextEgg);

  // Gear restocks every 5 minutes
  const nextGear = new Date(now);
  const nextGearM = Math.ceil((now.getMinutes() + (now.getSeconds() > 0 ? 1 : 0)) / 5) * 5;
  nextGear.setMinutes(nextGearM === 60 ? 0 : nextGearM, 0, 0);
  if (nextGearM === 60) nextGear.setHours(now.getHours() + 1);
  timers.gear = getCountdown(nextGear);

  // Seeds restock every 3 minutes
  const nextSeed = new Date(now);
  const nextSeedM = Math.ceil((now.getMinutes() + (now.getSeconds() > 0 ? 1 : 0)) / 3) * 3;
  nextSeed.setMinutes(nextSeedM === 60 ? 0 : nextSeedM, 0, 0);
  if (nextSeedM === 60) nextSeed.setHours(now.getHours() + 1);
  timers.seed = getCountdown(nextSeed);

  // Honey restocks every hour
  const nextHour = new Date(now);
  nextHour.setHours(now.getHours() + 1, 0, 0, 0);
  timers.honey = getCountdown(nextHour);

  // Cosmetics restock every 7 hours
  const next7 = new Date(now);
  const totalHours = now.getHours() + now.getMinutes() / 60 + now.getSeconds() / 3600;
  const next7h = Math.ceil(totalHours / 7) * 7;
  next7.setHours(next7h, 0, 0, 0);
  timers.cosmetics = getCountdown(next7);

  return timers;
}

// Divine items tracking
const DIVINE_ITEMS = ["beanstalk", "basic sprinkler", "master sprinkler", "godly sprinkler", "ember lily"];

function checkDivineItems(stockData) {
  const divineItemsInStock = [];
  
  // Check all stock categories for divine items
  const allItems = [
    ...stockData.gearStock,
    ...stockData.seedsStock,
    ...stockData.eggStock,
    ...stockData.cosmeticsStock,
    ...stockData.honeyStock
  ];
  
  for (const item of allItems) {
    if (DIVINE_ITEMS.some(divine => item.name.toLowerCase().includes(divine.toLowerCase())) && item.value > 0) {
      divineItemsInStock.push(item);
    }
  }
  
  return divineItemsInStock;
}

function getNextStockItem(category) {
  const now = getPHTime();
  let nextTime;
  
  switch (category.toLowerCase()) {
    case 'gear':
      const nextGearM = Math.ceil((now.getMinutes() + (now.getSeconds() > 0 ? 1 : 0)) / 5) * 5;
      nextTime = new Date(now);
      nextTime.setMinutes(nextGearM === 60 ? 0 : nextGearM, 0, 0);
      if (nextGearM === 60) nextTime.setHours(now.getHours() + 1);
      break;
    case 'seed':
      const nextSeedM = Math.ceil((now.getMinutes() + (now.getSeconds() > 0 ? 1 : 0)) / 3) * 3;
      nextTime = new Date(now);
      nextTime.setMinutes(nextSeedM === 60 ? 0 : nextSeedM, 0, 0);
      if (nextSeedM === 60) nextTime.setHours(now.getHours() + 1);
      break;
    case 'egg':
      nextTime = new Date(now);
      nextTime.setMinutes(now.getMinutes() < 30 ? 30 : 0);
      if (now.getMinutes() >= 30) nextTime.setHours(now.getHours() + 1);
      nextTime.setSeconds(0, 0);
      break;
    default:
      return null;
  }
  
  return getCountdown(nextTime);
}

function getNextScheduledTime(startTime = getPHTime()) {
  const base = new Date(startTime);
  const min = base.getMinutes();
  const next5 = Math.floor(min / 5) * 5 + 5;
  base.setMinutes(next5, 30, 0);
  if (base <= startTime) base.setMinutes(base.getMinutes() + 5);
  return base;
}

function formatValue(val) {
  if (val >= 1_000_000) return `x${(val / 1_000_000).toFixed(1)}M`;
  if (val >= 1_000) return `x${(val / 1_000).toFixed(1)}K`;
  return `x${val}`;
}

function addEmoji(name) {
  const emojis = {
    "Common Egg": "ü•ö", "Uncommon Egg": "üê£", "Rare Egg": "üç≥", "Legendary Egg": "ü™∫", "Mythical Egg": "ü•ö", "Bug Egg": "ü™≤",
    "Watering Can": "üöø", "Trowel": "üõ†Ô∏è", "Recall Wrench": "üîß", "Basic Sprinkler": "üíß", "Advanced Sprinkler": "üí¶", "Godly Sprinkler": "‚õ≤",
    "Lightning Rod": "‚ö°", "Master Sprinkler": "üåä", "Favorite Tool": "‚ù§Ô∏è", "Harvest Tool": "üåæ",
    "Carrot": "ü•ï", "Strawberry": "üçì", "Blueberry": "ü´ê", "Orange Tulip": "üå∑", "Tomato": "üçÖ", "Corn": "üåΩ", "Daffodil": "üåº",
    "Watermelon": "üçâ", "Pumpkin": "üéÉ", "Apple": "üçé", "Bamboo": "üéç", "Coconut": "ü••", "Cactus": "üåµ", "Dragon Fruit": "üçà",
    "Mango": "ü•≠", "Grape": "üçá", "Mushroom": "üçÑ", "Pepper": "üå∂Ô∏è", "Cacao": "üç´", "Beanstalk": "üå±"
  };
  return `${emojis[name] || "üåø"} ${name}`;
}

async function fetchWithTimeout(url, options = {}, timeout = 5000) {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  try {
    const response = await axios.get(url, { ...options, signal: controller.signal });
    clearTimeout(id);
    return response;
  } catch (error) {
    clearTimeout(id);
    throw error;
  }
}

// Natural Language Processing for questions
function processNaturalLanguageQuery(text) {
  const lowerText = text.toLowerCase();
  
  // Stock-related questions
  if (lowerText.includes('stock') && lowerText.includes('today')) {
    return 'stock_today';
  }
  if (lowerText.includes('what') && (lowerText.includes('available') || lowerText.includes('stock'))) {
    return 'stock_available';
  }
  if (lowerText.includes('when') && (lowerText.includes('restock') || lowerText.includes('refresh'))) {
    return 'next_restock';
  }
  if (lowerText.includes('divine') || lowerText.includes('rare') || lowerText.includes('special')) {
    return 'divine_items';
  }
  if (lowerText.includes('price') || lowerText.includes('cost') || lowerText.includes('how much')) {
    return 'pricing_info';
  }
  if (lowerText.includes('weather') || lowerText.includes('bonus') || lowerText.includes('crop')) {
    return 'weather_info';
  }
  
  // General bot questions
  if (lowerText.includes('how') && lowerText.includes('work')) {
    return 'how_bot_works';
  }
  if (lowerText.includes('help') || lowerText.includes('command')) {
    return 'help_info';
  }
  
  return 'general_question';
}

async function handleNaturalLanguageQuery(senderId, queryType, originalText, pageAccessToken) {
  // Send typing indicator
  await sendTypingIndicator(senderId, pageAccessToken, 'typing_on');
  
  // Add a slight delay for more natural interaction
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  try {
    switch (queryType) {
      case 'stock_today':
      case 'stock_available':
        await gagstockCommand.execute(senderId, ['on'], pageAccessToken);
        break;
        
      case 'next_restock':
        await nextStockCommand.execute(senderId, ['all'], pageAccessToken);
        break;
        
      case 'divine_items':
        await customCommand.execute(senderId, ['divine'], pageAccessToken);
        break;
        
      case 'weather_info':
        const weatherResponse = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üå§Ô∏è  ùó™ùó≤ùóÆùòÅùóµùó≤ùóø ùóúùóªùó≥ùóº  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü Weather affects crop bonuses in 
   Grow A Garden!

‚ï≠‚îÄ üåà Weather Effects ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ‚òÄÔ∏è Sunny: Normal growth       ‚îÇ
‚îÇ üåßÔ∏è Rainy: Water bonus         ‚îÇ
‚îÇ ‚õÖ Cloudy: Reduced growth      ‚îÇ
‚îÇ üå™Ô∏è Stormy: Special events     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üîÑ Use 'refresh' to see current 
   weather and active bonuses! ‚ú®`;
        await sendMessage(senderId, { text: weatherResponse }, pageAccessToken);
        break;
        
      case 'pricing_info':
        const pricingResponse = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üí∞  ùó£ùóøùó∂ùó∞ùó∂ùóªùó¥ ùóúùóªùó≥ùóº  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üí° Items in Grow A Garden have 
   different price ranges:

‚ï≠‚îÄ üí∏ Price Categories ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üå± Seeds: 50-5,000 coins      ‚îÇ
‚îÇ üõ†Ô∏è Tools: 100-50,000 coins    ‚îÇ
‚îÇ ü•ö Eggs: 1,000-100,000 coins  ‚îÇ
‚îÇ üé® Cosmetics: 500-25,000 coins‚îÇ
‚îÇ üíé Divine: 10,000+ coins      ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üåü Prices vary based on rarity! ‚ú®`;
        await sendMessage(senderId, { text: pricingResponse }, pageAccessToken);
        break;
        
      case 'how_bot_works':
        const howItWorksResponse = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ü§ñ  ùóõùóºùòÑ ùóú ùó™ùóºùóøùó∏  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü I'm your enhanced Grow A Garden 
   stock tracking assistant!

‚ï≠‚îÄ ‚ö° My Abilities ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üìä Real-time stock monitoring  ‚îÇ
‚îÇ üîÑ Auto-refresh every 5 minutes‚îÇ
‚îÇ üå§Ô∏è Weather & bonus tracking   ‚îÇ
‚îÇ üíé Divine item alerts         ‚îÇ
‚îÇ ‚è∞ Restock countdown timers    ‚îÇ
‚îÇ üéØ Smart filtering system     ‚îÇ
‚îÇ üí¨ Natural language support   ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üöÄ Just ask me anything about 
   stocks and I'll help! ‚ú®`;
        await sendMessage(senderId, { text: howItWorksResponse }, pageAccessToken);
        break;
        
      case 'help_info':
        const helpResponse = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üìñ  ùó§ùòÇùó∂ùó∞ùó∏ ùóõùó≤ùóπùóΩ  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü You can ask me naturally:

‚ï≠‚îÄ üí¨ Example Questions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ "What stock today?"           ‚îÇ
‚îÇ "When is next restock?"       ‚îÇ
‚îÇ "Show me divine items"        ‚îÇ
‚îÇ "What's the weather?"         ‚îÇ
‚îÇ "How do you work?"            ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üéÆ Quick Commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ gagstock on - Start tracking ‚îÇ
‚îÇ refresh - Update now          ‚îÇ
‚îÇ help - Full command list     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üí° Just talk to me naturally! ‚ú®`;
        await sendMessage(senderId, { text: helpResponse }, pageAccessToken);
        break;
        
      default:
        const generalResponse = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ü§î  ùóúùóªùòÅùó≤ùóøùó≤ùòÄùòÅùó∂ùóªùó¥!  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü I understand you're asking about:
"${originalText}"

‚ï≠‚îÄ üí° I can help with ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üìä Stock information          ‚îÇ
‚îÇ ‚è∞ Restock timing             ‚îÇ
‚îÇ üå§Ô∏è Weather & bonuses          ‚îÇ
‚îÇ üíé Divine item tracking       ‚îÇ
‚îÇ üéÆ Bot features & commands    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

Try asking:
‚Ä¢ "What stock today?"
‚Ä¢ "When is next restock?"
‚Ä¢ "Show me divine items"

üöÄ I'm here to help! ‚ú®`;
        await sendMessage(senderId, { text: generalResponse }, pageAccessToken);
    }
  } finally {
    // Turn off typing indicator
    await sendTypingIndicator(senderId, pageAccessToken, 'typing_off');
  }
}

// Auto scheduling system with voice messages
async function checkBotSchedule() {
  const now = getPHTime();
  const currentHour = now.getHours();
  const currentMinute = now.getMinutes();

  // Check for bot offline time (12:00 AM)
  if (currentHour === BOT_OFFLINE_HOUR && currentMinute === BOT_OFFLINE_MINUTE && botIsOnline && !offlineMessageSent) {
    botIsOnline = false;
    offlineMessageSent = true;
    onlineMessageSent = false;

    // Send voice message and offline notification to all users
    for (const userId of activeSessions.keys()) {
      // Send voice message first
      await sendVoiceMessage(userId, VOICE_MESSAGE_URL, PAGE_ACCESS_TOKEN);
      
      // Then send offline message
      const offlineMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üåô  ùóïùóºùòÅ ùó•ùó≤ùòÄùòÅ ùóßùó∂ùó∫ùó≤  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üò¥ Time for a peaceful break!
üéµ Enjoy the relaxing music!

‚ï≠‚îÄ üåô Rest Schedule ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üí§ Offline: 12:00 AM - 5:00 AM‚îÇ
‚îÇ ‚òÄÔ∏è Online: 5:00 AM - 12:00 AM ‚îÇ
‚îÇ üéµ Voice: Multo relaxation    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üåü Sweet dreams! See you at 5 AM! ‚ú®`;
      
      await sendMessage(userId, { text: offlineMessage }, PAGE_ACCESS_TOKEN);
      
      // Stop tracking sessions
      const session = activeSessions.get(userId);
      if (session) {
        clearTimeout(session.timeout);
        activeSessions.delete(userId);
        lastSentCache.delete(userId);
        stockClearingAlerts.delete(userId);
      }
    }

    logger.system('üåô Bot is now offline for scheduled rest time with voice message');
  }

  // Check for bot online time (5:00 AM)
  if (currentHour === BOT_ONLINE_HOUR && currentMinute === BOT_ONLINE_MINUTE && !botIsOnline && !onlineMessageSent) {
    botIsOnline = true;
    onlineMessageSent = true;
    offlineMessageSent = false;

    // Send online notification to admin
    if (ADMIN_USER_ID) {
      const onlineMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚òÄÔ∏è  ùóïùóºùòÅ ùó¢ùóªùóπùó∂ùóªùó≤!  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåÖ Good morning! Bot is back online!

‚ï≠‚îÄ ‚òÄÔ∏è Online Schedule ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üü¢ Status: Fully operational  ‚îÇ
‚îÇ ‚è∞ Time: 5:00 AM - 12:00 AM   ‚îÇ
‚îÇ üöÄ Features: All systems go   ‚îÇ
‚îÇ ‚ú® Ready: For beautiful day   ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üåü Enhanced tracking resumed! ‚ú®`;

      await sendMessage(ADMIN_USER_ID, { text: onlineMessage }, PAGE_ACCESS_TOKEN);
    }

    logger.system('‚òÄÔ∏è Bot is now online for scheduled active time');
  }
}

// Check schedule every minute
setInterval(checkBotSchedule, 60 * 1000);

// Enhanced Stock Clearing System (silent mode)
async function sendStockClearingAlert(userId) {
  // Silent cache clearing - no more alert messages
  setTimeout(() => {
    lastSentCache.delete(userId);
    stockClearingAlerts.delete(userId);
    logger.info(`üßπ Cleared stock cache for user: ${userId}`);
  }, STOCK_CLEAR_WARNING_TIME);
}

// Enhanced main gagstock command with better aesthetics and refresh button
const gagstockCommand = {
  name: "gagstock",
  aliases: ["gag", "stock", "track"],
  description: "Enhanced Grow A Garden stock tracker with beautiful formatting",
  usage: "gagstock on | gagstock on [filter] | gagstock off",
  category: "Tools ‚öíÔ∏è",
  async execute(senderId, args, pageAccessToken) {
    if (!botIsOnline) {
      const offlineResponse = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üåô  ùóïùóºùòÅ ùó•ùó≤ùòÄùòÅùó∂ùóªùó¥  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üò¥ I'm currently in rest mode 
   (12:00 AM - 5:00 AM)

üåü Come back at 5:00 AM for 
   enhanced tracking! ‚ú®`;
      await sendMessage(senderId, { text: offlineResponse }, pageAccessToken);
      return;
    }

    const action = args[0]?.toLowerCase();
    const filters = args.slice(1).join(" ").split("|").map(f => f.trim().toLowerCase()).filter(Boolean);

    if (action === "off") {
        const session = activeSessions.get(senderId);
        if (session) {
            clearTimeout(session.timeout);
            activeSessions.delete(senderId);
            lastSentCache.delete(senderId);
            stockClearingAlerts.delete(senderId);
            logger.info(`üõë Gagstock tracking stopped for user: ${senderId}`);

            const stopMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üõë  ùóßùóøùóÆùó∞ùó∏ùó∂ùóªùó¥ ùó¶ùòÅùóºùóΩùóΩùó≤ùó±  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚úÖ Your Gagstock tracking has been 
   successfully disabled.

‚ï≠‚îÄ üìä Session Summary ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üìÖ Duration: Active session   ‚îÇ
‚îÇ üîÑ Updates: Delivered         ‚îÇ
‚îÇ ‚ú® Status: Clean shutdown     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

Thank you for using our enhanced
tracking service! üå±‚ú®

üíö Come back anytime! üöÄ`;
            return await sendMessage(senderId, { text: stopMessage }, pageAccessToken);
        } else {
            const noSessionMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ö†Ô∏è   ùó°ùóº ùóîùó∞ùòÅùó∂ùòÉùó≤ ùó¶ùó≤ùòÄùòÄùó∂ùóºùóª  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

ü§î You don't have an active gagstock 
   tracking session running.

‚ï≠‚îÄ üöÄ Quick Start Commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üü¢ 'gagstock on' - Track all  ‚îÇ
‚îÇ üéØ 'gagstock on [item]' - Filter ‚îÇ
‚îÇ üìñ 'help' - Show full guide   ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

Ready to start tracking? üåü`;
            return await sendMessage(senderId, { text: noSessionMessage }, pageAccessToken);
        }
    }

    if (action !== "on") {
        const usageMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üìñ  ùóöùóÆùó¥ùòÄùòÅùóºùó∞ùó∏ ùóñùóºùó∫ùó∫ùóÆùóªùó± ‚ïë
‚ïë      ùóöùòÇùó∂ùó±ùó≤ ‚ú®               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü ùóîùòÉùóÆùó∂ùóπùóÆùóØùóπùó≤ ùóñùóºùó∫ùó∫ùóÆùóªùó±ùòÄ:

‚ï≠‚îÄ üü¢ Basic Tracking ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ gagstock on                   ‚îÇ
‚îÇ ‚îî‚îÄ Track all items & updates  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üéØ Filtered Tracking ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ gagstock on Sunflower | Can   ‚îÇ
‚îÇ ‚îî‚îÄ Track specific items only  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üî¥ Stop Tracking ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ gagstock off                  ‚îÇ
‚îÇ ‚îî‚îÄ Disable all notifications  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

Need more help? Type 'help'! üí´`;
        return await sendMessage(senderId, { text: usageMessage }, pageAccessToken);
    }

    if (activeSessions.has(senderId)) {
        logger.warn(`‚ö†Ô∏è User ${senderId} tried to start an existing session.`);
        const alreadyActiveMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üì°  ùó¶ùó≤ùòÄùòÄùó∂ùóºùóª ùóîùóπùóøùó≤ùóÆùó±ùòÜ ‚ïë
‚ïë      ùóîùó∞ùòÅùó∂ùòÉùó≤! ‚ö°           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚úÖ You're already tracking Gagstock 
   with enhanced monitoring!

‚ï≠‚îÄ üîÑ Session Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üõë 'gagstock off' - Stop first ‚îÇ
‚îÇ üîÑ 'refresh' - Update now     ‚îÇ
‚îÇ üìä Current: Active & Stable   ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

Your tracking is working perfectly! üåü`;
        return await sendMessage(senderId, { text: alreadyActiveMessage }, pageAccessToken);
    }

    await sendTypingIndicator(senderId, pageAccessToken, 'typing_on');

    const startMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ú®  ùóòùóªùóµùóÆùóªùó∞ùó≤ùó± ùóßùóøùóÆùó∞ùó∏ùó∂ùóªùó¥  ‚ïë
‚ïë      ùóîùó∞ùòÅùó∂ùòÉùóÆùòÅùó≤ùó±! üöÄ         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéâ Enhanced Gagstock tracking is 
   now active with premium features!

‚ï≠‚îÄ üåü New Features Enabled ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üîÑ Auto-refresh every 5min    ‚îÇ
‚îÇ üå§Ô∏è Live weather updates       ‚îÇ
‚îÇ ‚è∞ Smart restock timers        ‚îÇ
‚îÇ üßπ Auto cache clearing        ‚îÇ
‚îÇ ‚ú® Beautiful notifications    ‚îÇ
‚îÇ üé® Enhanced aesthetics        ‚îÇ
‚îÇ üí¨ Natural language support   ‚îÇ
‚îÇ üîÑ Quick refresh button       ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

${filters.length > 0 ? 
`üéØ ùóôùó∂ùóπùòÅùó≤ùóøùó∂ùóªùó¥ ùó≥ùóºùóø: ${filters.join(', ')}` : 
'üìä ùóßùóøùóÆùó∞ùó∏ùó∂ùóªùó¥: All items & categories'}

Sit back, relax, and let our enhanced
system do all the work! üå±üíö`;

    await sendMessage(senderId, { text: startMessage }, pageAccessToken);
    await sendTypingIndicator(senderId, pageAccessToken, 'typing_off');
    logger.info(`‚ú® Enhanced gagstock tracking started for user: ${senderId} with filters:`, filters.length > 0 ? filters : 'all items');

    async function fetchAndNotify(alwaysSend = false) {
      try {
        const [stockRes, weatherRes] = await Promise.all([
          fetchWithTimeout("https://gagstock.gleeze.com/grow-a-garden"),
          fetchWithTimeout("https://growagardenstock.com/api/stock/weather"),
        ]);

        const backup = stockRes.data.data;
        const stockData = {
          gearStock: backup.gear.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
          seedsStock: backup.seed.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
          eggStock: backup.egg.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
          cosmeticsStock: backup.cosmetics.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
          honeyStock: backup.honey.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
        };

        const weather = {
          currentWeather: weatherRes.data.currentWeather || "Unknown",
          icon: weatherRes.data.icon || "üå§Ô∏è",
          cropBonuses: weatherRes.data.cropBonuses || "None",
          updatedAt: weatherRes.data.updatedAt || new Date().toISOString(),
        };

        const restocks = getNextRestocks();
        const formatList = (arr) => arr.map(i => `  ‚îú‚îÄ ${addEmoji(i.name)}: ${formatValue(i.value)}`).join("\n");
        const updatedAtPH = getPHTime().toLocaleString("en-PH", {
          hour: "numeric", minute: "numeric", second: "numeric", hour12: true, day: "2-digit", month: "short", year: "numeric"
        });

        let filteredContent = "";
        let matchedItems = false;

        const processSection = (label, items, restock, isFilterable) => {
            let filtered = items;
            if (isFilterable && filters.length > 0) {
                filtered = items.filter(i => filters.some(f => i.name.toLowerCase().includes(f)));
            }
            if (filtered.length > 0) {
                if (isFilterable) matchedItems = true;
                return `‚ï≠‚îÄ ${label} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
${formatList(filtered)}
  ‚îî‚îÄ ‚è∞ Next Restock: ${restock}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

`;
            }
            return "";
        };

        if (filters.length > 0) {
             filteredContent += processSection("üõ†Ô∏è ùóöùó≤ùóÆùóø & ùóßùóºùóºùóπùòÄ", stockData.gearStock, restocks.gear, true);
             filteredContent += processSection("üå± ùó¶ùó≤ùó≤ùó±ùòÄ & ùó£ùóπùóÆùóªùòÅùòÄ", stockData.seedsStock, restocks.seed, true);
             if (matchedItems) {
                filteredContent += processSection("ü•ö ùóòùó¥ùó¥ùòÄ & ùó£ùó≤ùòÅùòÄ", stockData.eggStock, restocks.egg, false);
                filteredContent += processSection("üé® ùóñùóºùòÄùó∫ùó≤ùòÅùó∂ùó∞ ùóúùòÅùó≤ùó∫ùòÄ", stockData.cosmeticsStock, restocks.cosmetics, false);
                filteredContent += processSection("üçØ ùóõùóºùóªùó≤ùòÜ ùó£ùóøùóºùó±ùòÇùó∞ùòÅùòÄ", stockData.honeyStock, restocks.honey, false);
             }
        } else {
            filteredContent += processSection("üõ†Ô∏è ùóöùó≤ùóÆùóø & ùóßùóºùóºùóπùòÄ", stockData.gearStock, restocks.gear, false);
            filteredContent += processSection("üå± ùó¶ùó≤ùó≤ùó±ùòÄ & ùó£ùóπùóÆùóªùòÅùòÄ", stockData.seedsStock, restocks.seed, false);
            filteredContent += processSection("ü•ö ùóòùó¥ùó¥ùòÄ & ùó£ùó≤ùòÅùòÄ", stockData.eggStock, restocks.egg, false);
            filteredContent += processSection("üé® ùóñùóºùòÄùó∫ùó≤ùòÅùó∂ùó∞ ùóúùòÅùó≤ùó∫ùòÄ", stockData.cosmeticsStock, restocks.cosmetics, false);
            filteredContent += processSection("üçØ ùóõùóºùóªùó≤ùòÜ ùó£ùóøùóºùó±ùòÇùó∞ùòÅùòÄ", stockData.honeyStock, restocks.honey, false);
            matchedItems = true;
        }

        const currentKey = JSON.stringify({ gearStock: stockData.gearStock, seedsStock: stockData.seedsStock });
        const lastSent = lastSentCache.get(senderId);

        // Check if user has DND enabled
        if (userDoNotDisturb.has(senderId) && !alwaysSend) {
          return false; // Skip notifications if DND is active
        }

        if (!alwaysSend && lastSent && lastSent !== currentKey) {
          if (!stockClearingAlerts.has(senderId)) {
            stockClearingAlerts.set(senderId, true);
            await sendStockClearingAlert(senderId);
          }
        }

        if (!alwaysSend && lastSent === currentKey) return false;
        if (filters.length > 0 && !matchedItems) return false;
        
        // Check for divine items and send special alert
        const divineItems = checkDivineItems(stockData);
        if (divineItems.length > 0 && !userDoNotDisturb.has(senderId)) {
          const divineAlert = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíé  ùóóùóúùó©ùóúùó°ùóò ùóîùóüùóòùó•ùóß! ‚ïë
‚ïë      ‚ö° ùó¶ùó£ùóòùóñùóúùóîùóü ùóúùóßùóòùó†! ‚ö°    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üö® **RARE DIVINE ITEMS IN STOCK!** üö®

${divineItems.map(item => `üåü ${addEmoji(item.name)}: ${formatValue(item.value)}`).join('\n')}

‚ö° **ACT FAST!** These divine items 
   are extremely rare and sell out 
   within minutes! 

üèÉ‚Äç‚ôÇÔ∏èüí® Get them NOW! üíé‚ú®`;
          
          await sendMessage(senderId, { text: divineAlert }, pageAccessToken);
        }

        lastSentCache.set(senderId, currentKey);

        // Get user's name for personalized greeting
        let userName = "Friend";
        try {
          const userInfoResponse = await axios.get(`https://graph.facebook.com/v19.0/${senderId}`, {
            params: { 
              fields: 'first_name',
              access_token: pageAccessToken 
            },
            timeout: 5000
          });
          userName = userInfoResponse.data.first_name || "Friend";
        } catch (error) {
          logger.debug("Could not fetch user name:", error.message);
        }

        const personalizedHeader = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üåæ Hi ${userName}! Fresh Stock! üåü   ‚ïë
‚ïë      Enhanced Update! ‚ú®         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

`;

        const weatherSection = `‚ï≠‚îÄ üå§Ô∏è ùó™ùó≤ùóÆùòÅùóµùó≤ùóø & ùóïùóºùóªùòÇùòÄùó≤ùòÄ ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
  ‚îú‚îÄ Current: ${weather.icon} ${weather.currentWeather}
  ‚îî‚îÄ Crop Bonus: üåæ ${weather.cropBonuses}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

`;

        const footerSection = `‚ï≠‚îÄ üìä ùóüùóÆùòÄùòÅ ùó®ùóΩùó±ùóÆùòÅùó≤ & ùó¶ùòÅùóÆùòÅùòÇùòÄ ‚îÄ‚ïÆ
  ‚îú‚îÄ üìÖ Time: ${updatedAtPH}
  ‚îú‚îÄ üîÑ Source: Live API Data
  ‚îú‚îÄ ‚úÖ Status: All Systems Healthy
  ‚îî‚îÄ üåü Enhanced: v${systemVersion} Active
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

        const message = `${personalizedHeader}${filteredContent}${weatherSection}${footerSection}`;

        // Send message with refresh button
        const messageWithRefreshButton = {
          text: message,
          quick_replies: [
            {
              content_type: "text",
              title: "üîÑ Refresh Stock",
              payload: "REFRESH_STOCK"
            },
            {
              content_type: "text", 
              title: "üíé Divine Items",
              payload: "DIVINE_ITEMS"
            },
            {
              content_type: "text",
              title: "‚è∞ Next Restock",
              payload: "NEXT_RESTOCK"
            }
          ]
        };

        await sendMessage(senderId, messageWithRefreshButton, pageAccessToken);

        // Send beautiful developer signature image
        const messageWithImage = {
          attachment: {
            type: "image",
            payload: {
              url: "https://github.com/Lazy-dev-hash/user-attachmens/blob/main/New%20Project%207%20%5B3D158B3%5D.png",
              is_reusable: true
            }
          }
        };

        await sendMessage(senderId, messageWithImage, pageAccessToken);
        return true;
      } catch (err) {
        logger.error("‚ùå Enhanced fetch failed:", err.message);
        return false;
      }
    }

    async function runSchedule() {
      const now = getPHTime();
      const nextTime = getNextScheduledTime(now);
      const wait = Math.max(nextTime - now, 1000);
      const timer = setTimeout(async function trigger() {
        const session = activeSessions.get(senderId);
        if (!session || !botIsOnline) return;

        // Update last activity
        session.lastActivity = Date.now();

        const notified = await fetchAndNotify(false);
        if (notified) {
          logger.debug(`‚ú® Enhanced stock update sent to user: ${senderId}`);
        }
        runSchedule();
      }, wait);

      activeSessions.set(senderId, { 
        timeout: timer, 
        lastActivity: Date.now(),
        filters: filters,
        startTime: Date.now()
      });
    }

    const firstFetchSuccess = await fetchAndNotify(true);
    if(firstFetchSuccess) {
      runSchedule();
    } else {
      const fetchErrorMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ùå  ùóñùóºùóªùóªùó≤ùó∞ùòÅùó∂ùóºùóª ùóòùóøùóøùóºùóø  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üòî Unable to fetch initial stock 
   data from Grow A Garden servers.

‚ï≠‚îÄ üîß What's happening? ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üì° Server connectivity issue  ‚îÇ
‚îÇ ‚è∞ Usually temporary problem   ‚îÇ
‚îÇ üîÑ Auto-retry in progress     ‚îÇ
‚îÇ üí´ Will resolve shortly       ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üå± Please try again in a few moments!
   Enhanced features are ready! ‚ú®`;
      await sendMessage(senderId, { text: fetchErrorMessage }, pageAccessToken);
      activeSessions.delete(senderId);
    }
  }
};

// Enhanced Refresh Command with aesthetic button
const refreshCommand = {
  name: "refresh",
  aliases: ["reload", "sync", "update"],
  description: "Force refresh all stock data with cache clearing",
  usage: "refresh",
  category: "Tools ‚öíÔ∏è",
  async execute(senderId, args, pageAccessToken) {
    if (!botIsOnline) {
      const offlineResponse = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üåô  ùóïùóºùòÅ ùó•ùó≤ùòÄùòÅùó∂ùóªùó¥  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üò¥ I'm currently in rest mode 
   (12:00 AM - 5:00 AM)

üåü Come back at 5:00 AM for 
   enhanced tracking! ‚ú®`;
      await sendMessage(senderId, { text: offlineResponse }, pageAccessToken);
      return;
    }

    const session = activeSessions.get(senderId);
    if (!session) {
      const noSessionMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ö†Ô∏è   ùó°ùóº ùóîùó∞ùòÅùó∂ùòÉùó≤ ùó¶ùó≤ùòÄùòÄùó∂ùóºùóª  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üö´ You need to start gagstock tracking
   first before refreshing.

‚ï≠‚îÄ üöÄ Quick Start Guide ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üü¢ 'gagstock on' - Start     ‚îÇ
‚îÇ üéØ 'gagstock on [filter]'    ‚îÇ
‚îÇ üìñ 'help' - Show commands    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üå± Ready to begin tracking! ‚ú®`;
      return await sendMessage(senderId, { text: noSessionMessage }, pageAccessToken);
    }

    // Send typing indicator
    await sendTypingIndicator(senderId, pageAccessToken, 'typing_on');

    // Send clearing alert if cache exists
    if (lastSentCache.has(senderId) && !stockClearingAlerts.has(senderId)) {
      stockClearingAlerts.set(senderId, true);
      await sendStockClearingAlert(senderId);
    }

    const refreshingMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîÑ  ùó•ùó≤ùó≥ùóøùó≤ùòÄùóµùó∂ùóªùó¥ ùó¶ùòÅùóºùó∞ùó∏  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üîÑ Fetching the freshest stock data...
‚ö° Loading enhanced information...
üåü Applying beautiful formatting...

‚ï≠‚îÄ üì° Connection Status ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üåê Connecting to servers...   ‚îÇ
‚îÇ üìä Downloading stock data...  ‚îÇ
‚îÇ üå§Ô∏è Fetching weather info...   ‚îÇ
‚îÇ ‚ú® Preparing display...       ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

Please wait while magic happens! ü™Ñ`;
    await sendMessage(senderId, { text: refreshingMessage }, PAGE_ACCESS_TOKEN);

    try {
      // Force clear cache and fetch new data
      lastSentCache.delete(senderId);
      stockClearingAlerts.delete(senderId);

      const [stockRes, weatherRes] = await Promise.all([
        fetchWithTimeout("https://gagstock.gleeze.com/grow-a-garden"),
        fetchWithTimeout("https://growagardenstock.com/api/stock/weather"),
      ]);

      const backup = stockRes.data.data;
      const stockData = {
        gearStock: backup.gear.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
        seedsStock: backup.seed.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
        eggStock: backup.egg.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
        cosmeticsStock: backup.cosmetics.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
        honeyStock: backup.honey.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
      };

      const weather = {
        currentWeather: weatherRes.data.currentWeather || "Unknown",
        icon: weatherRes.data.icon || "üå§Ô∏è",
        cropBonuses: weatherRes.data.cropBonuses || "None",
        updatedAt: weatherRes.data.updatedAt || new Date().toISOString(),
      };

      const restocks = getNextRestocks();
      const formatList = (arr) => arr.map(i => `  ‚îú‚îÄ ${addEmoji(i.name)}: ${formatValue(i.value)}`).join("\n");
      const updatedAtPH = getPHTime().toLocaleString("en-PH", {
        hour: "numeric", minute: "numeric", second: "numeric", hour12: true, day: "2-digit", month: "short", year: "numeric"
      });

      const filters = session.filters || [];
      let filteredContent = "";

      const processSection = (label, items, restock) => {
        let filtered = items;
        if (filters.length > 0) {
          filtered = items.filter(i => filters.some(f => i.name.toLowerCase().includes(f)));
        }
        if (filtered.length > 0 || filters.length === 0) {
          return `‚ï≠‚îÄ ${label} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
${formatList(filters.length > 0 ? filtered : items)}
  ‚îî‚îÄ ‚è∞ Next Restock: ${restock}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

`;
        }
        return "";
      };

      filteredContent += processSection("üõ†Ô∏è ùóöùó≤ùóÆùóø & ùóßùóºùóºùóπùòÄ", stockData.gearStock, restocks.gear);
      filteredContent += processSection("üå± ùó¶ùó≤ùó≤ùó±ùòÄ & ùó£ùóπùóÆùóªùòÅùòÄ", stockData.seedsStock, restocks.seed);
      filteredContent += processSection("ü•ö ùóòùó¥ùó¥ùòÄ & ùó£ùó≤ùòÅùòÄ", stockData.eggStock, restocks.egg);
      filteredContent += processSection("üé® ùóñùóºùòÄùó∫ùó≤ùòÅùó∂ùó∞ùòÄ", stockData.cosmeticsStock, restocks.cosmetics);
      filteredContent += processSection("üçØ ùóõùóºùóªùó≤ùòÜ ùó£ùóøùóºùó±ùòÇùó∞ùòÅùòÄ", stockData.honeyStock, restocks.honey);

      const refreshSuccessHeader = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üîÑ ùó¶ùòÅùóºùó∞ùó∏ ùó¶ùòÇùó∞ùó∞ùó≤ùòÄùòÄùó≥ùòÇùóπùóπùòÜ     ‚ïë
‚ïë      ùó•ùó≤ùó≥ùóøùó≤ùòÄùóµùó≤ùó±! ‚ú®           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

`;

      const weatherSection = `‚ï≠‚îÄ üå§Ô∏è ùó™ùó≤ùóÆùòÅùóµùó≤ùóø & ùóïùóºùóªùòÇùòÄùó≤ùòÄ ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
  ‚îú‚îÄ Current: ${weather.icon} ${weather.currentWeather}
  ‚îî‚îÄ Crop Bonus: üåæ ${weather.cropBonuses}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

`;

      const footerSection = `‚ï≠‚îÄ üìä ùóôùóøùó≤ùòÄùóµ ùóóùóÆùòÅùóÆ ùóúùóªùó≥ùóº ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
  ‚îú‚îÄ üìÖ Updated: ${updatedAtPH}
  ‚îú‚îÄ üîÑ Cache: Cleared & Fresh
  ‚îî‚îÄ ‚úÖ Status: All Systems Go!
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

      const message = `${refreshSuccessHeader}${filteredContent}${weatherSection}${footerSection}`;

      // Send message with aesthetic refresh button
      const messageWithRefreshButton = {
        text: message,
        quick_replies: [
          {
            content_type: "text",
            title: "üîÑ Refresh Again",
            payload: "REFRESH_STOCK"
          },
          {
            content_type: "text", 
            title: "üíé Divine Items",
            payload: "DIVINE_ITEMS"
          },
          {
            content_type: "text",
            title: "‚è∞ Next Restock",
            payload: "NEXT_RESTOCK"
          },
          {
            content_type: "text",
            title: "üå§Ô∏è Weather Info",
            payload: "WEATHER_INFO"
          }
        ]
      };

      await sendMessage(senderId, messageWithRefreshButton, pageAccessToken);

      // Send beautiful developer signature image
      const messageWithImage = {
        attachment: {
          type: "image",
          payload: {
            url: "https://github.com/Lazy-dev-hash/user-attachmens/blob/main/New%20Project%207%20%5B3D158B3%5D.png",
            is_reusable: true
          }
        }
      };

      await sendMessage(senderId, messageWithImage, pageAccessToken);

    } catch (error) {
      const errorMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ùå  ùó•ùó≤ùó≥ùóøùó≤ùòÄùóµ ùó®ùóªùòÄùòÇùó∞ùó∞ùó≤ùòÄùòÄùó≥ùòÇùóπ  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üòî Unable to refresh stock data 
   at this moment.

‚ï≠‚îÄ üîß Troubleshooting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üîÑ Try again in a few moments ‚îÇ
‚îÇ üì° Server might be busy       ‚îÇ
‚îÇ üåê Check internet connection  ‚îÇ
‚îÇ üí´ Usually resolves quickly   ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üå± We're working to fix this! üíö`;
      await sendMessage(senderId, { text: errorMessage }, pageAccessToken);
    } finally {
      await sendTypingIndicator(senderId, pageAccessToken, 'typing_off');
    }
  }
};

// Do Not Disturb Command
const doNotDisturbCommand = {
  name: "dnd",
  aliases: ["donotdisturb", "quiet", "silence"],
  description: "Toggle do not disturb mode to pause notifications",
  usage: "dnd on | dnd off | dnd status",
  category: "Tools ‚öíÔ∏è",
  async execute(senderId, args, pageAccessToken) {
    const action = args[0]?.toLowerCase();
    
    if (!action || !['on', 'off', 'status'].includes(action)) {
      const usageMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîï  ùóóùóº ùó°ùóºùòÅ ùóóùó∂ùòÄùòÅùòÇùóøùóØ  ‚ïë
‚ïë      ùóñùóºùó∫ùó∫ùóÆùóªùó± ùóöùòÇùó∂ùó±ùó≤ ‚ú®        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåô ùóîùòÉùóÆùó∂ùóπùóÆùóØùóπùó≤ ùó¢ùóΩùòÅùó∂ùóºùóªùòÄ:

‚ï≠‚îÄ üîï Enable DND Mode ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ dnd on                        ‚îÇ
‚îÇ ‚îî‚îÄ Pause all notifications    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üîî Disable DND Mode ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ dnd off                       ‚îÇ
‚îÇ ‚îî‚îÄ Resume notifications       ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üìä Check DND Status ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ dnd status                    ‚îÇ
‚îÇ ‚îî‚îÄ View current DND state     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

Perfect for peaceful moments! üå∏‚ú®`;
      return await sendMessage(senderId, { text: usageMessage }, pageAccessToken);
    }

    if (action === 'on') {
      userDoNotDisturb.set(senderId, true);
      const enableMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîï  ùóóùóº ùó°ùóºùòÅ ùóóùó∂ùòÄùòÅùòÇùóøùóØ  ‚ïë
‚ïë      ùóîùó∞ùòÅùó∂ùòÉùóÆùòÅùó≤ùó±! üåô          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üòå Peaceful mode is now active!

‚ï≠‚îÄ üå∏ DND Features Enabled ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üîï Stock notifications: OFF   ‚îÇ
‚îÇ üåô Auto updates: Paused       ‚îÇ
‚îÇ ‚ú® Divine alerts: Silenced    ‚îÇ
‚îÇ üí§ Peaceful experience: ON    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üßò‚Äç‚ôÄÔ∏è Enjoy your tranquil time!
   Type 'dnd off' to resume. üåü`;
      
      await sendMessage(senderId, { text: enableMessage }, pageAccessToken);
      logger.info(`üîï Do Not Disturb enabled for user: ${senderId}`);
      
    } else if (action === 'off') {
      userDoNotDisturb.delete(senderId);
      const disableMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîî  ùóóùóº ùó°ùóºùòÅ ùóóùó∂ùòÄùòÅùòÇùóøùóØ  ‚ïë
‚ïë      ùóóùó∂ùòÄùóÆùóØùóπùó≤ùó±! ‚ú®          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéâ Welcome back! Notifications resumed!

‚ï≠‚îÄ üåü Active Features Restored ‚îÄ‚ïÆ
‚îÇ üîî Stock notifications: ON    ‚îÇ
‚îÇ ‚ö° Auto updates: Active       ‚îÇ
‚îÇ üíé Divine alerts: Enabled     ‚îÇ
‚îÇ üöÄ Full experience: Restored  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üå± Ready to track stocks again! üíö`;
      
      await sendMessage(senderId, { text: disableMessage }, pageAccessToken);
      logger.info(`üîî Do Not Disturb disabled for user: ${senderId}`);
      
    } else if (action === 'status') {
      const isEnabled = userDoNotDisturb.has(senderId);
      const statusIcon = isEnabled ? 'üîï' : 'üîî';
      const statusText = isEnabled ? 'ENABLED' : 'DISABLED';
      const statusEmoji = isEnabled ? 'üåô' : 'üåü';
      
      const statusMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üìä  ùóóùó°ùóó ùó¶ùòÅùóÆùòÅùòÇùòÄ ${statusIcon}  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${statusEmoji} Do Not Disturb: **${statusText}**

‚ï≠‚îÄ üì± Current Settings ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üîî Notifications: ${isEnabled ? 'Paused   ' : 'Active   '} ‚îÇ
‚îÇ ‚ö° Auto Updates: ${isEnabled ? 'Disabled ' : 'Enabled  '} ‚îÇ
‚îÇ üíé Divine Alerts: ${isEnabled ? 'Silenced' : 'Enabled  '} ‚îÇ
‚îÇ üå∏ Peace Mode: ${isEnabled ? 'ON       ' : 'OFF      '} ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

${isEnabled ? 
'üßò‚Äç‚ôÄÔ∏è Enjoying peaceful moments...\n   Type "dnd off" to resume! üåô' : 
'üöÄ All systems active & ready!\n   Type "dnd on" for peace! ‚ú®'}`;
      
      await sendMessage(senderId, { text: statusMessage }, pageAccessToken);
    }
  }
};

// Next Stock Command
const nextStockCommand = {
  name: "nextstock",
  aliases: ["next", "nextstk", "upcoming"],
  description: "Track next stock restock for specific categories",
  usage: "nextstock [gear|seed|egg] | nextstock all",
  category: "Tools ‚öíÔ∏è",
  async execute(senderId, args, pageAccessToken) {
    const category = args[0]?.toLowerCase();
    
    if (!category || !['gear', 'seed', 'egg', 'all'].includes(category)) {
      const usageMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚è∞  ùó°ùó≤ùòÖùòÅ ùó¶ùòÅùóºùó∞ùó∏ ‚ïë
‚ïë      ùóßùóøùóÆùó∞ùó∏ùó≤ùóø üéØ              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü ùóîùòÉùóÆùó∂ùóπùóÆùóØùóπùó≤ ùóñùóÆùòÅùó≤ùó¥ùóºùóøùó∂ùó≤ùòÄ:

‚ï≠‚îÄ üõ†Ô∏è Gear Tracking ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ nextstock gear                ‚îÇ
‚îÇ ‚îî‚îÄ Next gear restock timer    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üå± Seeds Tracking ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ nextstock seed                ‚îÇ
‚îÇ ‚îî‚îÄ Next seed restock timer    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ ü•ö Eggs Tracking ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ nextstock egg                 ‚îÇ
‚îÇ ‚îî‚îÄ Next egg restock timer     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üìä All Categories ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ nextstock all                 ‚îÇ
‚îÇ ‚îî‚îÄ Complete restock overview  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

Perfect for timing your purchases! ‚è∞‚ú®`;
      return await sendMessage(senderId, { text: usageMessage }, pageAccessToken);
    }

    const restocks = getNextRestocks();
    
    if (category === 'all') {
      const allStockMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚è∞  ùóîùóπùóπ ùó¶ùòÅùóºùó∞ùó∏ ‚ïë
‚ïë      ùó•ùó≤ùòÄùòÅùóºùó∞ùó∏ ùóßùó∂ùó∫ùó≤ùóøùòÄ üéØ       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü **Complete Restock Schedule:**

‚ï≠‚îÄ üõ†Ô∏è Gear & Tools ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ‚è∞ Next Restock: ${restocks.gear}        ‚îÇ
‚îÇ üîÑ Frequency: Every 5 minutes  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üå± Seeds & Plants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ‚è∞ Next Restock: ${restocks.seed}        ‚îÇ
‚îÇ üîÑ Frequency: Every 3 minutes  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ ü•ö Eggs & Pets ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ‚è∞ Next Restock: ${restocks.egg}        ‚îÇ
‚îÇ üîÑ Frequency: Every 30 minutes ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üçØ Honey Products ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ‚è∞ Next Restock: ${restocks.honey}        ‚îÇ
‚îÇ üîÑ Frequency: Every hour       ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üé® Cosmetics ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ‚è∞ Next Restock: ${restocks.cosmetics}        ‚îÇ
‚îÇ üîÑ Frequency: Every 7 hours    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üéØ Perfect timing awaits! ‚ú®`;
      
      await sendMessage(senderId, { text: allStockMessage }, pageAccessToken);
      
    } else {
      const categoryEmojis = {
        'gear': 'üõ†Ô∏è',
        'seed': 'üå±', 
        'egg': 'ü•ö'
      };
      
      const categoryNames = {
        'gear': 'Gear & Tools',
        'seed': 'Seeds & Plants',
        'egg': 'Eggs & Pets'
      };
      
      const frequencies = {
        'gear': 'Every 5 minutes',
        'seed': 'Every 3 minutes',
        'egg': 'Every 30 minutes'
      };
      
      const nextTime = restocks[category];
      const emoji = categoryEmojis[category];
      const name = categoryNames[category];
      const frequency = frequencies[category];
      
      const categoryMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ${emoji}  ùó°ùó≤ùòÖùòÅ ${name.split(' ')[0]} ‚ïë
‚ïë      ùó•ùó≤ùòÄùòÅùóºùó∞ùó∏ ùóßùó∂ùó∫ùó≤ùóø ‚è∞         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéØ **${name} Tracking:**

‚ï≠‚îÄ ‚è∞ Restock Information ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üïê Next Restock: ${nextTime}       ‚îÇ
‚îÇ üîÑ Frequency: ${frequency}    ‚îÇ
‚îÇ üìä Category: ${name}         ‚îÇ
‚îÇ ‚ú® Status: Tracking Active    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üí° **Pro Tips:**
‚Ä¢ Set a timer for optimal timing
‚Ä¢ Check 30 seconds before restock
‚Ä¢ Be ready for fast purchases

üåü Happy shopping timing! üõí‚ú®`;
      
      await sendMessage(senderId, { text: categoryMessage }, pageAccessToken);
    }
  }
};

// Custom Command for Allowed Users
const customCommand = {
  name: "custom",
  aliases: ["vip", "special", "premium"],
  description: "Special commands for authorized users",
  usage: "custom [action]",
  category: "Premium üëë",
  async execute(senderId, args, pageAccessToken) {
    if (!customCommandUsers.has(senderId) && senderId !== ADMIN_USER_ID) {
      const unauthorizedMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîí  ùó£ùóøùó≤ùó∫ùó∂ùòÇùó∫ ùóîùó∞ùó∞ùó≤ùòÄùòÄ  ‚ïë
‚ïë      ùó•ùó≤ùóæùòÇùó∂ùóøùó≤ùó±! ‚ú®            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü This is an exclusive premium 
   command for VIP users only.

‚ï≠‚îÄ üíé How to Get Access ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üëë Contact the bot admin      ‚îÇ
‚îÇ üéØ Request special permission  ‚îÇ
‚îÇ ‚ú® Unlock premium features     ‚îÇ
‚îÇ üåü Enjoy exclusive commands    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üå± Continue using regular commands!
üíö Thank you for understanding! ‚ú®`;
      return await sendMessage(senderId, { text: unauthorizedMessage }, pageAccessToken);
    }

    const action = args[0]?.toLowerCase();
    
    if (!action) {
      const premiumMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üëë  ùó£ùóøùó≤ùó∫ùó∂ùòÇùó∫ ùóñùóºùó∫ùó∫ùóÆùóªùó±ùòÄ  ‚ïë
‚ïë      ùóîùòÉùóÆùó∂ùóπùóÆùóØùóπùó≤! ‚ú®           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü Welcome to Premium Access!

‚ï≠‚îÄ üíé Available Commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ custom divine                 ‚îÇ
‚îÇ ‚îî‚îÄ Track divine items only    ‚îÇ
‚îÇ                               ‚îÇ
‚îÇ custom alerts                 ‚îÇ
‚îÇ ‚îî‚îÄ Enhanced alert system      ‚îÇ
‚îÇ                               ‚îÇ
‚îÇ custom priority               ‚îÇ
‚îÇ ‚îî‚îÄ Priority notifications     ‚îÇ
‚îÇ                               ‚îÇ
‚îÇ custom analytics              ‚îÇ
‚îÇ ‚îî‚îÄ Advanced stock analytics   ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üöÄ Exclusive features at your 
   fingertips! Enjoy premium! üíé‚ú®`;
      
      return await sendMessage(senderId, { text: premiumMessage }, pageAccessToken);
    }

    if (action === 'divine') {
      // Send typing indicator
      await sendTypingIndicator(senderId, pageAccessToken, 'typing_on');
      
      try {
        const [stockRes] = await Promise.all([
          fetchWithTimeout("https://gagstock.gleeze.com/grow-a-garden")
        ]);

        const backup = stockRes.data.data;
        const stockData = {
          gearStock: backup.gear.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
          seedsStock: backup.seed.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
          eggStock: backup.egg.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
          cosmeticsStock: backup.cosmetics.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
          honeyStock: backup.honey.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
        };

        const divineItems = checkDivineItems(stockData);
        
        if (divineItems.length === 0) {
          const noDivineMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíé  ùóóùó∂ùòÉùó∂ùóªùó≤ ùóúùòÅùó≤ùó∫ùòÄ ‚ïë
‚ïë      ùó¶ùó≤ùóÆùóøùó∞ùóµ üîç              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üòî No divine items in stock currently.

‚ï≠‚îÄ üåü Monitored Divine Items ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üå± Beanstalk                  ‚îÇ
‚îÇ üíß Basic Sprinkler            ‚îÇ
‚îÇ üåä Master Sprinkler           ‚îÇ
‚îÇ ‚õ≤ Godly Sprinkler            ‚îÇ
‚îÇ üî• Ember Lily                 ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ú® Keep checking - they restock 
   regularly! Premium tracking 
   will alert you! üíé`;
          
          await sendMessage(senderId, { text: noDivineMessage }, pageAccessToken);
        } else {
          const divineList = divineItems.map(item => `  ‚îú‚îÄ ${addEmoji(item.name)}: ${formatValue(item.value)}`).join("\n");
          
          const divineMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíé  ùóóùó∂ùòÉùó∂ùóªùó≤ ùóúùòÅùó≤ùó∫ùòÄ ‚ïë
‚ïë      ùóôùóºùòÇùóªùó±! ‚ú®               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéâ Divine items are in stock!

‚ï≠‚îÄ üåü Available Divine Items ‚îÄ‚îÄ‚îÄ‚ïÆ
${divineList}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ö° **Premium Alert:** These rare 
   items are available NOW!

üèÉ‚Äç‚ôÇÔ∏è Act fast - divine items sell 
   out quickly! üíé‚ú®`;
          
          await sendMessage(senderId, { text: divineMessage }, pageAccessToken);
        }
        
      } catch (error) {
        const errorMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ùå  ùó£ùóøùó≤ùó∫ùó∂ùòÇùó∫ ùóòùóøùóøùóºùóø  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üòî Unable to fetch divine items 
   data at this moment.

üîÑ Please try again shortly!
üíé Premium features will resume! ‚ú®`;
        await sendMessage(senderId, { text: errorMessage }, pageAccessToken);
      } finally {
        await sendTypingIndicator(senderId, pageAccessToken, 'typing_off');
      }
    }
  }
};

// ===================================================================================
// 5. COMMAND HANDLER
// ===================================================================================

const commands = new Map();

// Register all commands
[gagstockCommand, refreshCommand, doNotDisturbCommand, nextStockCommand, customCommand].forEach(cmd => {
  commands.set(cmd.name, cmd);
  if (cmd.aliases) {
    cmd.aliases.forEach(alias => commands.set(alias, cmd));
  }
});

function isRateLimited(userId) {
  const now = Date.now();
  const userRequests = userRateLimit.get(userId) || [];

  // Remove requests older than 1 minute
  const recentRequests = userRequests.filter(time => now - time < 60000);

  if (recentRequests.length >= MAX_REQUESTS_PER_MINUTE) {
    return true;
  }

  recentRequests.push(now);
  userRateLimit.set(userId, recentRequests);
  return false;
}

// Enhanced message handler with natural language processing
async function handleMessage(senderId, message) {
  if (!message.text) return;

  // Enhanced rate limiting
  if (isRateLimited(senderId)) {
    logger.warn(`‚è∞ Rate limited user: ${senderId}`);
    const rateLimitMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚è∞  ùóòùóªùóµùóÆùóªùó∞ùó≤ùó± ùó•ùóÆùòÅùó≤ ‚ïë
‚ïë      ùóüùó∂ùó∫ùó∂ùòÅ ùóîùó∞ùòÅùó∂ùòÉùó≤! üö¶      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üèÉ‚Äç‚ôÇÔ∏è Whoa there, speedy explorer!

You're sending messages a bit too 
quickly for our enhanced systems.

‚ï≠‚îÄ üå± Take a Moment ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ‚è∞ Wait: Just a few seconds    ‚îÇ
‚îÇ üßò Relax: Quality over speed   ‚îÇ
‚îÇ ‚ú® Enhanced: Better experience ‚îÇ
‚îÇ üíö Patience: Worth the wait    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üåü Enhanced features work best 
   with mindful interaction! ‚ú®`;
    await sendMessage(senderId, { text: rateLimitMessage }, PAGE_ACCESS_TOKEN);
    return;
  }

  logger.info(`üí¨ Processing enhanced message from ${senderId}: "${message.text}"`);
  const text = message.text.trim();

  // Handle quick reply responses
  if (message.quick_reply) {
    const payload = message.quick_reply.payload;
    
    switch (payload) {
      case 'REFRESH_STOCK':
        await refreshCommand.execute(senderId, [], PAGE_ACCESS_TOKEN);
        return;
      case 'DIVINE_ITEMS':
        await customCommand.execute(senderId, ['divine'], PAGE_ACCESS_TOKEN);
        return;
      case 'NEXT_RESTOCK':
        await nextStockCommand.execute(senderId, ['all'], PAGE_ACCESS_TOKEN);
        return;
      case 'WEATHER_INFO':
        const weatherResponse = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üå§Ô∏è  ùó™ùó≤ùóÆùòÅùóµùó≤ùóø ùóúùóªùó≥ùóº  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü Current weather affects your crops!

üîÑ Use 'refresh' or start tracking 
   to see live weather updates! ‚ú®`;
        await sendMessage(senderId, { text: weatherResponse }, PAGE_ACCESS_TOKEN);
        return;
    }
  }

  const args = text.split(/\s+/);
  const commandName = args.shift().toLowerCase();
  const command = commands.get(commandName);

  if (command) {
    try {
      await command.execute(senderId, args, PAGE_ACCESS_TOKEN);
    } catch (error) {
      logger.error(`‚ùå Error executing enhanced command '${commandName}' for user ${senderId}:`, error);
      const errorMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üò•  ùóòùóªùóµùóÆùóªùó∞ùó≤ùó± ùó¶ùòÜùòÄùòÅùó≤ùó∫  ‚ïë
‚ïë      ùóòùóøùóøùóºùóø ùóóùó≤ùòÅùó≤ùó∞ùòÅùó≤ùó±! üõ†Ô∏è     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üòî Something unexpected happened 
   in our enhanced system.

‚ï≠‚îÄ üîß Auto-Recovery Active ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üîÑ Trying to fix automatically ‚îÇ
‚îÇ üíª Developer has been notified ‚îÇ
‚îÇ ‚è∞ Usually resolves quickly    ‚îÇ
‚îÇ üåü Enhanced stability enabled  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üå± Please try again in a moment!
   Our enhanced system is self-healing! ‚ú®`;
      await sendMessage(senderId, { text: errorMessage }, PAGE_ACCESS_TOKEN);
    }
  } else {
    // Process natural language queries
    const queryType = processNaturalLanguageQuery(text);
    
    if (queryType !== 'general_question' || text.includes('?')) {
      await handleNaturalLanguageQuery(senderId, queryType, text, PAGE_ACCESS_TOKEN);
    } else if (commandName === 'help') {
      const helpMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ü§ñ  ùóòùóªùóµùóÆùóªùó∞ùó≤ùó± ùóöùóÆùó¥ùòÄùòÅùóºùó∞ùó∏  ‚ïë
‚ïë      ùóïùóºùòÅ ùóõùó≤ùóπùóΩ ‚ú®            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ú® ùóîùòÉùóÆùó∂ùóπùóÆùóØùóπùó≤ ùóñùóºùó∫ùó∫ùóÆùóªùó±ùòÄ:

‚ï≠‚îÄ üåæ Main Commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üü¢ gagstock on                ‚îÇ
‚îÇ    Start enhanced tracking     ‚îÇ
‚îÇ                                ‚îÇ
‚îÇ üéØ gagstock on [filter]       ‚îÇ
‚îÇ    Track specific items        ‚îÇ
‚îÇ    Example: Sunflower | Can    ‚îÇ
‚îÇ                                ‚îÇ
‚îÇ üî¥ gagstock off               ‚îÇ
‚îÇ    Stop tracking gracefully   ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ ‚ö° Quick Actions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üîÑ refresh                     ‚îÇ
‚îÇ    Force refresh with alerts   ‚îÇ
‚îÇ                                ‚îÇ
‚îÇ üîï dnd on/off                  ‚îÇ
‚îÇ    Toggle notifications        ‚îÇ
‚îÇ                                ‚îÇ
‚îÇ ‚è∞ nextstock [category]        ‚îÇ
‚îÇ    Check restock timers        ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üí¨ Natural Language ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ Just ask me questions like:    ‚îÇ
‚îÇ "What stock today?"           ‚îÇ
‚îÇ "When is next restock?"       ‚îÇ
‚îÇ "Show me divine items"        ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ï≠‚îÄ üåü Enhanced Features ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ü§ñ Version: ${systemVersion} (Latest)      ‚îÇ
‚îÇ üåê Auto-schedule: 5AM-12AM    ‚îÇ
‚îÇ üé® Premium aesthetics enabled ‚îÇ
‚îÇ üîÑ Smart cache management     ‚îÇ
‚îÇ ‚ú® Beautiful notifications    ‚îÇ
‚îÇ üí¨ Natural language support   ‚îÇ
‚îÇ üîÑ Quick refresh buttons      ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üí´ Enhanced & ready to serve! üöÄ`;
      await sendMessage(senderId, { text: helpMessage }, PAGE_ACCESS_TOKEN);
    } else {
      logger.warn(`‚ùì Enhanced command not found: '${commandName}' from user ${senderId}`);
      const unknownMessage = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ùì  ùóòùóªùóµùóÆùóªùó∞ùó≤ùó± ùóñùóºùó∫ùó∫ùóÆùóªùó±  ‚ïë
‚ïë      ùó°ùóºùòÅ ùó•ùó≤ùó∞ùóºùó¥ùóªùó∂ùòáùó≤ùó±! ü§î       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

ü§ñ I didn't understand '${commandName}', 
   but you can ask me naturally!

‚ï≠‚îÄ üí° Try These Examples ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üí¨ "What stock today?"         ‚îÇ
‚îÇ üí¨ "When is next restock?"     ‚îÇ
‚îÇ üí¨ "Show me divine items"      ‚îÇ
‚îÇ üí¨ "What's the weather?"       ‚îÇ
‚îÇ üìñ Type 'help' - See commands ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üåü I understand natural language
   and I'm here to help! üíö‚ú®`;
      await sendMessage(senderId, { text: unknownMessage }, PAGE_ACCESS_TOKEN);
    }
  }
}

// ===================================================================================
// 6. ENHANCED EXPRESS SERVER & WEBHOOKS
// ===================================================================================

const app = express().use(bodyParser.json());
const PORT = process.env.PORT || 1337;

// Enhanced middleware
app.use((req, res, next) => {
  logger.debug(`üåê ${req.method} ${req.path} - ${req.ip}`);
  next();
});

app.use((error, req, res, next) => {
  logger.error('üí• Express error:', error);
  res.status(500).json({ error: 'Internal server error', enhanced: true });
});

const server = app.listen(PORT, async () => {
  logger.banner('üöÄ Enhanced GagStock Bot Server v3.1.0', `Listening on port ${PORT} with premium features`);
  logger.success('‚ú® Custom timing & voice messages enabled!');
  logger.success('üß† Natural language processing active!');
  logger.success('‚ö° Typing indicators configured!');
  logger.success('üîÑ Aesthetic refresh buttons ready!');
  logger.success('üåô Auto schedule: Offline 12AM-5AM');
});

// Enhanced graceful shutdown
process.on('SIGTERM', () => {
  logger.system('üõë SIGTERM received, shutting down enhanced system gracefully...');
  for (const [userId, session] of activeSessions) {
    clearTimeout(session.timeout);
    logger.info(`üßπ Cleaned up enhanced session for user: ${userId}`);
  }
  activeSessions.clear();
  lastSentCache.clear();
  stockClearingAlerts.clear();

  server.close(() => {
    logger.system('‚úÖ Enhanced server closed gracefully');
    process.exit(0);
  });
});

// Enhanced webhook handler
app.post('/webhook', async (req, res) => {
  try {
    let body = req.body;

    if (!body || body.object !== 'page') {
      logger.warn('‚ö†Ô∏è Invalid enhanced webhook object:', body?.object);
      return res.sendStatus(404);
    }

    if (!body.entry || !Array.isArray(body.entry)) {
      logger.warn('‚ö†Ô∏è Invalid enhanced webhook entry structure');
      return res.sendStatus(400);
    }

    for (const entry of body.entry) {
      if (!entry.messaging || !Array.isArray(entry.messaging)) {
        continue;
      }

      for (const webhook_event of entry.messaging) {
        if (!webhook_event.sender?.id) {
          logger.warn('‚ö†Ô∏è Enhanced webhook event missing sender ID');
          continue;
        }

        const sender_psid = webhook_event.sender.id;
        logger.webhook('üîî Enhanced event received:', { 
          from: sender_psid, 
          type: webhook_event.message ? 'message' : 'other',
          timestamp: webhook_event.timestamp
        });

        if (webhook_event.message) {
          handleMessage(sender_psid, webhook_event.message).catch(error => {
            logger.error('‚ùå Error handling enhanced message:', error);
          });
        }
      }
    }

    res.status(200).send('ENHANCED_EVENT_RECEIVED');
  } catch (error) {
    logger.error('üí• Enhanced webhook processing error:', error);
    res.status(500).send('ENHANCED_INTERNAL_ERROR');
  }
});

app.get('/webhook', (req, res) => {
  let mode = req.query['hub.mode'];
  let token = req.query['hub.verify_token'];
  let challenge = req.query['hub.challenge'];
  if (mode && token) {
    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
      logger.success('‚úÖ ENHANCED_WEBHOOK_VERIFIED');
      res.status(200).send(challenge);
    } else {
      logger.error('‚ùå Enhanced webhook verification failed. Tokens do not match.');
      res.sendStatus(403);
    }
  }
});

// Enhanced health check endpoint with Render love
app.get('/health', (req, res) => {
  const heartbeat = UPTIME_CONFIG.heartbeatEmojis[Math.floor(Math.random() * UPTIME_CONFIG.heartbeatEmojis.length)];

  const health = {
    status: 'healthy-enhanced-with-render-love',
    version: systemVersion,
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    activeSessions: activeSessions.size,
    memoryUsage: process.memoryUsage(),
    renderLove: heartbeat,
    botOnline: botIsOnline,
    customSchedule: {
      offlineTime: `${BOT_OFFLINE_HOUR}:${String(BOT_OFFLINE_MINUTE).padStart(2, '0')}`,
      onlineTime: `${BOT_ONLINE_HOUR}:${String(BOT_ONLINE_MINUTE).padStart(2, '0')}`,
      voiceMessageUrl: VOICE_MESSAGE_URL
    },
    enhancedFeatures: {
      customTiming: true,
      voiceMessages: true,
      naturalLanguageProcessing: true,
      typingIndicators: true,
      refreshButtons: true,
      autoScheduling: true,
      stockClearing: true,
      premiumAesthetics: true,
      smartCaching: true,
      rateLimit: true
    },
    message: `Bot is running with enhanced love! ${heartbeat} Custom schedule & voice messages active!`
  };

  res.status(200).json(health);
});

logger.banner('üåü Enhanced GagStock Bot v3.1.0', 'Premium features with custom timing activated!');
logger.success('üå∏ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üå∏');
logger.success('‚ú®                    ùììùìÆùìøùìÆùìµùì∏ùìπ ùì´ùîÇ ùì¢ùì§ùìùùìùùìîùìõ                      ‚ú®');
logger.success('üí´              Enhanced with Custom Timing & Voice                üí´');
logger.success('üå∏ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üå∏');
